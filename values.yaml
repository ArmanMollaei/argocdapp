image:
  repository: velero/velero
  tag: v1.14.1
  pullPolicy: IfNotPresent

nameOverride: ""
fullnameOverride: ""

initContainers:
  - name: velero-plugin-for-local
    image: openebs/velero-plugin:latest
    imagePullPolicy: IfNotPresent
    volumeMounts:
      - mountPath: /target
        name: plugins

credentials:
  useSecret: false

rbac:
  create: true
  clusterAdministrator: true
  clusterAdministratorName: cluster-admin

serviceAccount:
  server:
    create: true
    name: ""
    annotations: {}
    labels: {}
    imagePullSecrets: []

configuration:
  backupStorageLocation:
    - name: default
      provider: openebs.io/localpath
      default: true
      accessMode: ReadWrite
      config:
        path: /data/velero/backups
      annotations: {}
  volumeSnapshotLocation:
    - name: default
      provider: openebs.io/localpath
      config: {}
      annotations: {}
  defaultBackupStorageLocation: default
  defaultVolumeSnapshotLocations: default

deployRestic: false
deployNodeAgent: false
backupsEnabled: true
snapshotsEnabled: true
upgradeCRDs: true
cleanUpCRDs: false

nodeAgent:
  podVolumePath: /var/lib/kubelet/pods
  useScratchEmptyDir: true
  priorityClassName: ""
  resources: {}
  tolerations: []
  annotations: {}
  labels: {}
  extraVolumes: []
  extraVolumeMounts: []
  extraEnvVars: {}
  extraArgs: []
  dnsPolicy: ClusterFirst
  podSecurityContext:
    runAsUser: 0
  containerSecurityContext: {}
  lifecycle: {}
  nodeSelector: {}
  affinity: {}
  dnsConfig: {}

metrics:
  enabled: true
  scrapeInterval: 30s
  scrapeTimeout: 10s
  service:
    annotations: {}
    labels: {}
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "8085"
      prometheus.io/path: "/metrics"
  serviceMonitor:
    autodetect: true
    enabled: false
    annotations: {}
    additionalLabels: {}
  nodeAgentPodMonitor:
    autodetect: true
    enabled: false
    annotations: {}
    additionalLabels: {}
  prometheusRule:
    autodetect: false
    enabled: false
    additionalLabels: {}
    spec: []

upgradeCRDsJob:
  extraVolumes: []
  extraVolumeMounts: []
  extraEnvVars: {}

livenessProbe:
  httpGet:
    path: /metrics
    port: http-monitoring
    scheme: HTTP
  initialDelaySeconds: 10
  periodSeconds: 30
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5

readinessProbe:
  httpGet:
    path: /metrics
    port: http-monitoring
    scheme: HTTP
  initialDelaySeconds: 10
  periodSeconds: 30
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5

dnsPolicy: ClusterFirst
tolerations: []
affinity: {}
nodeSelector: {}
dnsConfig: {}
podSecurityContext: {}
containerSecurityContext: {}
extraVolumes: []
extraVolumeMounts: []
lifecycle: {}
priorityClassName: ""
terminationGracePeriodSeconds: 3600
annotations: {}
secretAnnotations: {}
labels: {}
podAnnotations: {}
podLabels: {}

resources: {}
upgradeJobResources: {}

kubectl:
  image:
    repository: docker.io/bitnami/kubectl
  labels: {}
  annotations: {}
  containerSecurityContext: {}
  resources: {}

extraObjects: []
schedules: {}
configMaps: {}
